{
  "name": "caminte",
  "description": "ORM for every database: redis, mysql, neo4j, mongodb, rethinkdb, postgres, sqlite, tingodb",
  "version": "0.0.21",
  "author": {
    "name": "Aleksej Gordejev",
    "email": "aleksej@gordejev.lv",
    "url": "http://www.gordejev.lv"
  },
  "homepage": "http://camintejs.com/",
  "contributors": [
    {
      "name": "Anatoliy Chakkaev",
      "email": "rpm1602@gmail.com"
    },
    {
      "name": "Julien Guimont",
      "email": "julien.guimont@gmail.com"
    },
    {
      "name": "Joseph Junker",
      "email": "joseph.jnk@gmail.com"
    },
    {
      "name": "Henri Bergius",
      "email": "henri.bergius@iki.fi"
    },
    {
      "name": "redvulps",
      "email": "fabopereira@gmail.com"
    },
    {
      "name": "Felipe Sateler",
      "email": "fsateler@gmail.com"
    },
    {
      "name": "Amir M. Mahmoudi",
      "email": "a@geeknux.com"
    },
    {
      "name": "Justinas Stankevičius",
      "email": "justinas@justinas.me"
    },
    {
      "name": "Rick O'Toole",
      "email": "patrick.n.otoole@gmail.com"
    },
    {
      "name": "Nicholas Westlake",
      "email": "nicholasredlin@gmail.com"
    },
    {
      "name": "Michael Pauley"
    },
    {
      "name": "Aleksej Gordejev",
      "email": "aleksej@gordejev.lv"
    }
  ],
  "keywords": [
    "orm",
    "caminte",
    "database",
    "adapter",
    "redis",
    "mysql",
    "mariadb",
    "mongodb",
    "neo4j",
    "nano",
    "couchdb",
    "firebird",
    "postgres",
    "sqlite3",
    "tingodb",
    "rethinkdb"
  ],
  "directories": {
    "lib": "lib",
    "media": "media",
    "support": "support",
    "tests": "tests"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/biggora/caminte.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "nodeunit tests/*_test*"
  },
  "engines": [
    "node >= 0.6.0"
  ],
  "dependencies": {
    "node-uuid": ">= 1.3.3"
  },
  "devDependencies": {
    "semicov": "*",
    "coffee-script": ">= 1.2.0",
    "nodeunit": ">= 0.6.4",
    "redis": ">= 0.7.2",
    "hiredis": "*",
    "mongoose": "3.x",
    "mysql": "2.x",
    "pg": ">= 0.7.2",
    "sqlite3": "2.x",
    "riak-js": ">= 0.4.1",
    "neo4j": ">= 0.2.5",
    "mongodb": "1.x",
    "felix-couchdb": ">= 1.0.3",
    "cradle": ">= 0.6.3",
    "rethinkdb": "1.12.x",
    "generic-pool": ">= 2.0.4"
  },
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/biggora/caminte.png?branch=master)](https://travis-ci.org/biggora/caminte)\n[![Dependency Status](https://gemnasium.com/biggora/caminte.png)](https://gemnasium.com/biggora/caminte)\n[![NPM version](https://badge.fury.io/js/caminte.png)](http://badge.fury.io/js/caminte)\n## About CaminteJS\n\nCaminteJS is cross-db ORM for nodejs, providing common interface to access\nmost popular database formats.\n\n#### CaminteJS adapters:\n    mysql, sqlite3, riak, postgres, couchdb, mongodb, redis, neo4j, firebird, rethinkdb, tingodb\n\n<table>\n    <tr>\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/memory.png\"/></td>\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/mongodb.png\"/></td>\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/mysql.png\"/></td>\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/postgresql.png\"/></td>\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/sqlite.png\"/></td>\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/mariadb.png\"/></td>\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/firebird.png\"/></td>   \n    </tr>\n    <tr>\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/couchdb.png\"/></td>\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/rethinkdb.png\"/></td>\n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/redis.png\"/></td> \n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/tingodb.png\"/></td>      \n      <td><img width=\"100\" src=\"https://github.com/biggora/caminte/raw/master/media/neo4j.png\"/></td> \n      <td colspan=\"2\"></td>\n    </tr>\n</table>\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/). Then:\n\n    $ npm install caminte -g\n\n## Overview\n\n* [Connecting to DB](#connecting)\n* [Defining a Model](#defining)\n* [Accessing a Model](#accessing)\n* [Setup Validations](#validations)\n* [Common API methods](#api)\n* [Define any Custom Method](#custom)\n* [Queries](#queries)\n* [Middleware (Hooks)](#middleware)\n* [Object lifecycle](#lifecycle)\n* [Your own database adapter](#adapter)\n* [Running tests](#running_tests)\n\n<a name=\"connecting\"></a>\n### Connecting to DB\n\nFirst, we need to define a connection.\n\n#### MySQL\n\nFor MySQL database need install [mysql client](https://github.com/felixge/node-mysql/). Then:\n\n    $ npm install mysql -g\n\n```javascript\n    var caminte = require('caminte'),\n    Schema = caminte.Schema,\n    db = {\n         driver     : \"mysql\",\n         host       : \"localhost\",\n         port       : \"3306\",\n         username   : \"test\",\n         password   : \"test\",\n         database   : \"test\"\n         pool       : true // optional for use pool directly \n    };\n\n    var schema = new Schema(db.driver, db);\n```\n\n#### Redis\n\nFor Redis database need install [redis client](https://github.com/mranney/node_redis/). Then:\n\n    $ npm install redis -g\n\n```javascript\n    var caminte = require('caminte'),\n    Schema = caminte.Schema,\n    db = {\n         driver     : \"redis\",\n         host       : \"localhost\",\n         port       : \"6379\"\n    };\n\n    var schema = new Schema(db.driver, db);\n```\n\n#### SQLite\n\nFor SQLite database need install [sqlite3 client](https://github.com/developmentseed/node-sqlite3/). Then:\n\n    $ npm install sqlite3 -g\n\n```javascript\n    var caminte = require('caminte'),\n    Schema = caminte.Schema,\n    db = {\n         driver     : \"sqlite3\",\n         database   : \"/db/mySite.db\"\n    };\n\n    var schema = new Schema(db.driver, db);\n```\n\n<a name=\"defining\"></a>\n### Defining a Model\n\nModels are defined through the `Schema` interface.\n\n```javascript\n// define models\nvar Post = schema.define('Post', {\n    title:     { type: schema.String,  limit: 255 },\n    content:   { type: schema.Text },\n    params:    { type: schema.JSON },\n    date:      { type: schema.Date,    default: Date.now },\n    published: { type: schema.Boolean, default: false, index: true }\n});\n\n// simplier way to describe model\nvar User = schema.define('User', {\n    name:         String,\n    bio:          schema.Text,\n    approved:     Boolean,\n    joinedAt:     Date,\n    age:          Number\n});\n```\n\n<a name=\"accessing\"></a>\n### Accessing a Model\n\n```javascript\n// models also accessible in schema:\nschema.models.User;\nschema.models.Post;\n```\n\n<a name=\"relationships\"></a>\n### Setup Relationships\n\n```javascript\nUser.hasMany(Post,   {as: 'posts',  foreignKey: 'userId'});\n// creates instance methods:\n// user.posts(conds)\n// user.posts.build(data) // like new Post({userId: user.id});\n// user.posts.create(data) // build and save\n\nPost.belongsTo(User, {as: 'author', foreignKey: 'userId'});\n// creates instance methods:\n// post.author(callback) -- getter when called with function\n// post.author() -- sync getter when called without params\n// post.author(user) -- setter when called with object\n\n// work with models:\nvar user = new User;\nuser.save(function (err) {\n    var post = user.posts.build({title: 'Hello world'});\n    post.save(console.log);\n});\n```\n\n<a name=\"validations\"></a>\n### Setup Validations\n\n```javascript\nUser.validatesPresenceOf('name', 'email')\nUser.validatesLengthOf('password', {min: 5, message: {min: 'Password is too short'}});\nUser.validatesInclusionOf('gender', {in: ['male', 'female']});\nUser.validatesExclusionOf('domain', {in: ['www', 'billing', 'admin']});\nUser.validatesNumericalityOf('age', {int: true});\nUser.validatesUniquenessOf('email', {message: 'email is not unique'});\n\nuser.isValid(function (valid) {\n    if (!valid) {\n        user.errors // hash of errors {attr: [errmessage, errmessage, ...], attr: ...}\n    }\n})\n```\n\n<a name=\"api\"></a>\n### Common API methods\n* [create](#create)\n* [all, run](#all)\n* [find](#find)\n* [findOrCreate](#findorcreate)\n* [findOne](#findone)\n* [findById](#findbyid)\n* [update](#update)\n* [updateOrCreate, upsert](#upsert)\n* [count](#count)\n* [remove](#remove)\n* [destroy](#destroy)\n* [destroyAll](#destroyall)\n\n#### Just instantiate model\n\n```javascript\n   var post = new Post();\n```\n\n<a name=\"create\"></a>\n#### #create(callback)\n\nSave model (of course async)\n\n```javascript\nPost.create(function(err){\n   // your code here\n});\n// same as new Post({userId: user.id});\nuser.posts.build\n// save as Post.create({userId: user.id}, function(err){\n   // your code here\n});\nuser.posts.create(function(err){\n   // your code here\n});\n```\n\n<a name=\"all\"></a>\n#### #all(params, callback)\n\nGet all instances\n\n```javascript\n// all published posts\nvar Query = Post.all();\nQuery.where('published', true).desc('date');\nQuery.run({}, function(err, post){\n   // your code here\n});\n// all posts\nPost.all(function(err, posts){\n   // your code here\n});\n// all posts by user\nPost.all({where: {userId: 2}, order: 'id', limit: 10, skip: 20}, function(err, posts){\n   // your code here\n});\n// the same as prev\nuser.posts(function(err, posts){\n   // your code here\n})\n```\n\n<a name=\"find\"></a>\n#### #find(params, callback)\n\nFind instances\n\n```javascript\n// all posts\nPost.find(function(err, posts){\n   // your code here\n});\n\n// all posts by user\nvar Query = Post.find();\nQuery.where('userId', 2);\nQuery.order('id', 'ASC');\nQuery.skip(20).limit(10);\n\nQuery.run({},function(err, posts){\n   // your code here\n});\n\n// the same as prev\nPost.find({where: {userId: user.id}, order: 'id', limit: 10, skip: 20}, function(err, posts){\n   // your code here\n});\n```\n\n<a name=\"findorcreate\"></a>\n#### #findOrCreate(params, data, callback)\n\nFind if exists or create instance.\n\n```javascript\n// find user by email\nUser.findOrCreate({\n      email : 'example@example.com'\n    }, {\n      name : 'Gocha',\n      age : 31\n    }, function(err, user){\n      // your code here\n});\n```\n\n<a name=\"findone\"></a>\n#### #findOne(params, callback)\n\nGet one latest instance\n{where: {published: true}, order: 'date DESC'}\n```javascript\nPost.findOne({where: {published: true}, order: 'date DESC'}, function(err, post){\n   // your code here\n});\n// or\nvar Query = Post.findOne();\nQuery.where('published',true).desc('date');\nQuery.run({}, function(err, post){\n   // your code here\n});\n```\n\n<a name=\"findbyid\"></a>\n#### #findById(id, callback)\n\nFind instance by id\n\n```javascript\nUser.findById(1, function(err, user){\n   // your code here\n})\n```\n\n<a name=\"upsert\"></a>\n#### #updateOrCreate(params, data, callback)\n\nUpdate if exists or create instance\n\n```javascript\nPost.updateOrCreate({\n      id: 100\n    }, {\n      title: 'Riga',\n      tag: 'city'\n    }, function(err, post){\n      // your code here\n});\n// or\nUser.updateOrCreate({\n      email: 'example@example.com'\n    }, {\n      name: 'Alex',\n      age: 43\n    }, function(err, user){\n      // your code here\n});\n```\n<a name=\"update\"></a>\n#### #update(params, data, callback)\n\nUpdate if exists instance\n\n```javascript\nUser.update({\n      where : {\n           email: 'example@example.com'\n        }\n    }, {\n      active: 0\n    }, function(err, user){\n      // your code here\n});\n// or\n Post.update({\n       id: {\n          inq: [100, 101, 102]\n       }\n     }, {\n       tag: 'city'\n     }, function(err, post){\n       // your code here\n });\n```\n\n<a name=\"count\"></a>\n#### #count(params, callback)\n\nCount instances\n\n```javascript\n// count posts by user\nPost.count({where: {userId: user.id}}, function(err, count){\n   // your code here\n});\n```\n\n<a name=\"remove\"></a>\n#### #remove(params, callback)\n\nRemove instances.\n\n```javascript\n// remove all unpublished posts\nPost.remove({where: {published: false}},function(err){\n   // your code here\n});\n```\n\n<a name=\"destroy\"></a>\n#### #destroy(callback)\n\nDestroy instance\n\n```javascript\nUser.findById(22, function(err, user) {\n    user.destroy(function(err){\n       // your code here\n    });\n});\n// or\nUser.destroyById(22, function(err) {\n    // your code here\n});\n```\n\n<a name=\"destroyall\"></a>\n#### #destroyAll(callback)\n\nDestroy all instances\n\n```javascript\nUser.destroyAll(function(err){\n   // your code here\n});\n```\n<a name=\"scope\"></a>\n### Define scope\n\n```javascript\nPost.scope('active', { published : true });\n\nPost.active(function(err, posts){\n    // your code here\n});\n\n```\n\n<a name=\"custom\"></a>\n### Define any Custom Method\n\n```javascript\nUser.prototype.getNameAndAge = function () {\n    return this.name + ', ' + this.age;\n};\n```\n\n<a name=\"queries\"></a>\n### Queries\n\n#### API methods\n\n* [where](#where)\n* [gt](#gt)\n* [gte](#gte)\n* [lt](#lt)\n* [lte](#lte)\n* [ne](#ne)\n* [in, inq] (#in)\n* [nin](#nin)\n* [regex](#regex)\n* [like](#like)\n* [nlike](#nlike)\n* [sort, order](#sort)\n* [group](#group)\n* [asc](#asc)\n* [desc](#desc)\n* [limit](#limit)\n* [skip](#skip)\n* [slice](#slice)\n* [between](#between)\n\n#### Example Queries\n```javascript\nvar Query = User.find();\nQuery.where('active', 1);\nQuery.order('id DESC');\nQuery.run({}, function(err, users) {\n   // your code here\n});\n```\n<a name=\"where\"></a>\n#### #where(key, val)\n\n```javascript\nvar Query = User.find();\nQuery.where('userId', user.id);\nQuery.run({}, function(err, count){\n   // your code here\n});\n// the same as prev\nUser.find({where: {userId: user.id}}, function(err, users){\n   // your code here\n});\n```\n<a name=\"gt\"></a>\n#### #gt(key, val)\n\nSpecifies a greater than expression.\n\n```javascript\nQuery.gt('userId', 100);\nQuery.where('userId').gt(100);\n// the same as prev\nUser.find({\n      where: {\n         userId: {\n              gt : 100\n         }\n      }\n    }}, function(err, users){\n   // your code here\n});\n```\n<a name=\"gte\"></a>\n#### #gte(key, val)\n\nSpecifies a greater than or equal to expression.\n\n```javascript\nQuery.gte('userId', 100);\nQuery.where('userId').gte(100);\n// the same as prev\nUser.find({\n      where: {\n         userId: {\n              gte : 100\n         }\n      }\n    }}, function(err, users){\n   // your code here\n});\n```\n<a name=\"lt\"></a>\n#### #lt(key, val)\n\nSpecifies a less than expression.\n\n```javascript\nQuery.lt('visits', 100);\nQuery.where('visits').lt(100);\n// the same as prev\nPost.find({\n      where: {\n         visits: {\n              lt : 100\n         }\n      }\n    }}, function(err, posts){\n   // your code here\n});\n```\n<a name=\"lte\"></a>\n#### #lte(key, val)\n\nSpecifies a less than or equal to expression.\n\n```javascript\nQuery.lte('visits', 100);\nQuery.where('visits').lte(100);\n// the same as prev\nPost.find({\n      where: {\n         visits: {\n              lte : 100\n         }\n      }\n    }}, function(err, posts){\n   // your code here\n});\n```\n<a name=\"ne\"></a>\n#### #ne(key, val)\n\nMatches all values that are not equal to the value specified in the query.\n\n```javascript\nQuery.ne('userId', 100);\nQuery.where('userId').ne(100);\n// the same as prev\nUser.find({\n      where: {\n         userId: {\n              ne : 100\n         }\n      }\n    }}, function(err, users){\n   // your code here\n});\n```\n<a name=\"in\"></a>\n#### #in(key, val)\n\nMatches any of the values that exist in an array specified in the query.\n\n```javascript\nQuery.in('userId', [1,5,7,9]);\nQuery.where('userId').in([1,5,7,9]);\n// the same as prev\nUser.find({\n      where: {\n         userId: {\n              in : [1,5,7,9]\n         }\n      }\n    }}, function(err, users){\n   // your code here\n});\n```\n<a name=\"regex\"></a>\n#### #regex(key, val)\n\nSelects rows where values match a specified regular expression.\n\n```javascript\nQuery.regex('title', 'intel');\nQuery.where('title').regex('intel');\n// the same as prev\nPost.find({\n      where: {\n         title: {\n              regex : 'intel'\n         }\n      }\n    }}, function(err, posts){\n   // your code here\n});\n```\n<a name=\"like\"></a>\n#### #like(key, val)\n\nPattern matching using a simple regular expression comparison.\n\n```javascript\nQuery.like('title', 'intel');\n// the same as prev\nPost.find({\n      where: {\n         title: {\n              like : 'intel'\n         }\n      }\n    }}, function(err, posts){\n   // your code here\n});\n```\n<a name=\"nlike\"></a>\n#### #nlike(key, val)\n\nPattern not matching using a simple regular expression comparison.\n\n```javascript\nQuery.nlike('title', 'intel');\n// the same as prev\nPost.find({\n      where: {\n         title: {\n              nlike : 'intel'\n         }\n      }\n    }}, function(err, posts){\n   // your code here\n});\n```\n<a name=\"nin\"></a>\n#### #nin(key, val)\n\nMatches values that do not exist in an array specified to the query.\n\n```javascript\nQuery.nin('id', [1,2,3]);\n// the same as prev\nPost.find({\n      where: {\n          title : {\n                   nin : [1,2,3]\n          }\n      }\n    }}, function(err, posts){\n   // your code here\n});\n```\n<a name=\"sort\"></a>\n#### #sort(key, val)\n\nSets the sort column and direction.\n\n```javascript\nQuery.sort('title DESC');\nQuery.sort('title', 'DESC');\n// the same as prev\nPost.find({\n      order: 'title DESC'\n    }}, function(err, posts){\n   // your code here\n});\n```\n<a name=\"group\"></a>\n#### #group(key)\n\nSets the group by column.\n\n```javascript\nQuery.group('title');\n// is the same as\nPost.find({\n      group: 'title'\n    }}, function(err, posts){\n   // your code here\n});\n```\n<a name=\"asc\"></a>\n#### #asc(key)\n\nSets the sort column and direction ASC.\n\n```javascript\nQuery.asc('title');\n// is the same as\nQuery.sort('title ASC');\n// the same as prev\nPost.find({\n      order: 'title ASC'\n    }}, function(err, posts){\n   // your code here\n});\n```\n<a name=\"desc\"></a>\n#### #desc(key)\n\nSets the sort column and direction DESC.\n\n```javascript\nQuery.desc('title');\n// is the same as\nQuery.sort('title DESC');\n// the same as prev\nPost.find({\n      order: 'title DESC'\n    }}, function(err, posts){\n   // your code here\n});\n```\n<a name=\"skip\"></a>\n#### #skip(val)\n\nThe skip method specifies at which row the database should begin returning results.\n\n```javascript\nQuery.skip(10);\n// the same as prev\nPost.find({\n      skip: 10\n    }}, function(err, posts){\n   // your code here\n});\n```\n<a name=\"limit\"></a>\n#### #limit(val)\n\nThe limit method specifies the max number of rows to return.\n\n```javascript\nQuery.limit(10);\n// the same as prev\nPost.find({\n      limit: 10\n    }}, function(err, posts){\n   // your code here\n});\n```\n<a name=\"slice\"></a>\n#### #slice(val)\n\nLimits the number of elements projected from an array. Supports skip and limit slices.\n\n```javascript\nQuery.slice([20,10]);\n// the same as prev\nPost.find({\n      skip: 20,\n      limit: 10\n    }}, function(err, posts){\n   // your code here\n});\n```\n<a name=\"between\"></a>\n#### #between(key, val)\n\nCheck whether a value is within a range of values.\n\n```javascript\nQuery.between('created', ['2013-01-01','2013-01-08']);\n// the same as prev\nPost.find({\n      where: {\n         created: {\n            between : ['2013-01-01','2013-01-08']\n         }\n      }\n    }}, function(err, posts){\n   // your code here\n});\n```\n\n<a name=\"middleware\"></a>\n### Middleware (Hooks)\n\nThe following callbacks supported:\n\n    - afterInitialize\n    - beforeCreate\n    - afterCreate\n    - beforeSave\n    - afterSave\n    - beforeUpdate\n    - afterUpdate\n    - beforeDestroy\n    - afterDestroy\n    - beforeValidation\n    - afterValidation\n\n\n```javascript\nUser.afterUpdate = function (next) {\n    this.updated_ts = new Date();\n    this.save();\n    // Pass control to the next\n    next();\n};\n```\n\nEach callback is class method of the model, it should accept single argument: `next`, this is callback which\nshould be called after end of the hook. Except `afterInitialize` because this method is syncronous (called after `new Model`).\n\n\n### Automigrate\nrequired only for mysql NOTE: it will drop User and Post tables\n\n```javascript\nschema.automigrate();\n```\n\n<a name=\"lifecycle\"></a>\n## Object lifecycle:\n\n```javascript\nvar user = new User;\n// afterInitialize\nuser.save(callback);\n// beforeValidation\n// afterValidation\n// beforeSave\n// beforeCreate\n// afterCreate\n// afterSave\n// callback\nuser.updateAttribute('email', 'email@example.com', callback);\n// beforeValidation\n// afterValidation\n// beforeUpdate\n// afterUpdate\n// callback\nuser.destroy(callback);\n// beforeDestroy\n// afterDestroy\n// callback\nUser.create(data, callback);\n// beforeValidate\n// afterValidate\n// beforeCreate\n// afterCreate\n// callback\n```\n\nRead the tests for usage examples: ./test/common_test.js\nValidations: ./test/validations_test.js\n\n<a name=\"adapter\"></a>\n## Your own database adapter\n\nTo use custom adapter, pass it's package name as first argument to `Schema` constructor:\n\n    mySchema = new Schema('couch-db-adapter', {host:.., port:...});\n\nMake sure, your adapter can be required (just put it into ./node_modules):\n\n    require('couch-db-adapter');\n\n<a name=\"running_tests\"></a>\n## Running tests\n\nTo run all tests (requires all databases):\n\n    npm test\n\nIf you run this line, of course it will fall, because it requres different databases to be up and running,\nbut you can use js-memory-engine out of box! Specify ONLY env var:\n\n    ONLY=memory nodeunit test/common_test.js\n\nof course, if you have redis running, you can run\n\n    ONLY=redis nodeunit test/common_test.js\n\n## Package structure\n\nNow all common logic described in `./lib/*.js`, and database-specific stuff in `./lib/adapters/*.js`. It's super-tiny, right?\n\n## Contributing\n\nIf you have found a bug please write unit test, and make sure all other tests still pass before pushing code to repo.\n\n## Recommend extensions\n\n- [TrinteJS - Javascrpt MVC Framework for Node.JS](http://www.trintejs.com/)\n- [Cross-db Session Storage for ExpressJS](https://github.com/biggora/express-mongodb)\n- [MongoDB Session Storage for ExpressJS](https://github.com/biggora/connect-caminte)\n- [Middleware exposing user-agent for NodeJS](https://github.com/biggora/express-useragent)\n- [Uploading files middleware for NodeJS](https://github.com/biggora/express-uploader)\n- [2CO NodeJS adapter for 2checkout API payment gateway](https://github.com/biggora/2co)\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 by Anatoliy Chakkaev <mail [åt] anatoliy [døt] in>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n## Resources\n\n- Visit the [author website](http://www.gordejev.lv).\n- Visit the [CaminteJS](http://www.camintejs.com) home page.\n- Follow [@biggora](https://twitter.com/#!/biggora) on Twitter for updates.\n- Report issues on the [github issues](https://github.com/biggora/caminte/issues) page.\n\n[![Analytics](https://ga-beacon.appspot.com/UA-22788134-5/caminte/readme)](https://github.com/igrigorik/ga-beacon) [![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/biggora/caminte/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/biggora/caminte/issues"
  },
  "_id": "caminte@0.0.21",
  "_from": "caminte@"
}
